/////////////////////////////////////////////////////////////////////////////
// Name:        vmovecadDlg.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     09/11/2010 15:18:21
// RCS-ID:      
// Copyright:   Visual Collaboration Technologies Inc.
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 09/11/2010 15:18:21

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

#include <wx/encconv.h>
#include "vmovecadapp.h"

#include "about.h"
#include "vmovecadDlg.h"
#include "vcUtils.h"
#include "datakit.h"
#include <sstream>
#include "vcCadTranslator.h"

//extern bool Translate(std::string InputPath,std::string OutputPath,bool bFileMode,bool &bSuccess);
extern std::string sOutputFormat;
extern DtkErrorStatus g_dtkErrorStatus;
extern int g_iInputFilesCount;
extern int g_iOutputFilesCount;
bool g_bIgnoreTransparency = false;
extern double g_fTessTolerance;


/*
 * VMoveCAD type definition
 */

IMPLEMENT_DYNAMIC_CLASS( VMoveCAD, wxDialog )


/*
 * VMoveCAD event table definition
 */

BEGIN_EVENT_TABLE( VMoveCAD, wxDialog )

////@begin VMoveCAD event table entries
    EVT_RADIOBUTTON( ID_FILE_RADIOBUTTON, VMoveCAD::OnFileRadiobuttonSelected )

    EVT_RADIOBUTTON( ID_DIRECTORY_RADIOBUTTON, VMoveCAD::OnDirectoryRadiobuttonSelected )

    EVT_COMBOBOX( ID_COMBOBOX, VMoveCAD::OnComboboxSelected )

    EVT_BUTTON( ID_FILEOPEN_BUTTON, VMoveCAD::OnFileopenButtonClick )

    EVT_BUTTON( ID_FILESAVE_BUTTON, VMoveCAD::OnFilesaveButtonClick )

    EVT_CHECKBOX( ID_TRANSPARENCY_CHECKBOX, VMoveCAD::OnTransparencyCheckboxClick )

    EVT_BUTTON( ID_TRANSLATE_BUTTON, VMoveCAD::OnTranslateButtonClick )

    EVT_BUTTON( ID_ABOUT_BUTTON, VMoveCAD::OnAboutButtonClick )

    EVT_BUTTON( ID_HELP_BUTTON, VMoveCAD::OnHelpButtonClick )

    EVT_BUTTON( ID_CLOSE_BUTTON, VMoveCAD::OnCloseButtonClick )

////@end VMoveCAD event table entries

END_EVENT_TABLE()


/*
 * VMoveCAD constructors
 */

VMoveCAD::VMoveCAD()
{
    Init();
    
    m_bFileMode = true;
}

VMoveCAD::VMoveCAD( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * VMoveCAD creator
 */

bool VMoveCAD::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin VMoveCAD creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    SetIcon(GetIconResource(wxT("VMoveCAD.ico")));
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end VMoveCAD creation
    return true;
}


/*
 * VMoveCAD destructor
 */

VMoveCAD::~VMoveCAD()
{
////@begin VMoveCAD destruction
////@end VMoveCAD destruction
}


/*
 * Member initialisation
 */

void VMoveCAD::Init()
{
////@begin VMoveCAD member initialisation
    m_bFileMode = true;
    m_pFileCheckBoxCtrl = NULL;
    m_pOutputFormatComboCtrl = NULL;
    m_pInputStaticCtrl = NULL;
    m_pInputFileNameTextCtrl = NULL;
    m_FileOpenButton = NULL;
    m_pOutputStaticCtrl = NULL;
    m_pOutputFileNameTextCtrl = NULL;
    m_pTessToleranceTextCtrl = NULL;
    m_pTransparencyCheckBoxCtrl = NULL;
////@end VMoveCAD member initialisation
}


/*
 * Control creation for VMoveCAD
 */

void VMoveCAD::CreateControls()
{    
////@begin VMoveCAD content construction
    VMoveCAD* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer4Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Input Mode"));
    wxStaticBoxSizer* itemStaticBoxSizer4 = new wxStaticBoxSizer(itemStaticBoxSizer4Static, wxHORIZONTAL);
    itemBoxSizer3->Add(itemStaticBoxSizer4, 0, wxGROW|wxALL, 5);

    m_pFileCheckBoxCtrl = new wxRadioButton( itemDialog1, ID_FILE_RADIOBUTTON, _("File"), wxDefaultPosition, wxDefaultSize, 0 );
    m_pFileCheckBoxCtrl->SetValue(false);
    itemStaticBoxSizer4->Add(m_pFileCheckBoxCtrl, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemStaticBoxSizer4->Add(5, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemStaticBoxSizer4->Add(5, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxRadioButton* itemRadioButton8 = new wxRadioButton( itemDialog1, ID_DIRECTORY_RADIOBUTTON, _("Directory"), wxDefaultPosition, wxDefaultSize, 0 );
    itemRadioButton8->SetValue(false);
    itemStaticBoxSizer4->Add(itemRadioButton8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer9Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Output File Type"));
    wxStaticBoxSizer* itemStaticBoxSizer9 = new wxStaticBoxSizer(itemStaticBoxSizer9Static, wxHORIZONTAL);
    itemBoxSizer3->Add(itemStaticBoxSizer9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText10 = new wxStaticText( itemDialog1, wxID_STATIC, _("Format"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer9->Add(itemStaticText10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemStaticBoxSizer9->Add(5, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_pOutputFormatComboCtrlStrings;
    m_pOutputFormatComboCtrl = new wxComboBox( itemDialog1, ID_COMBOBOX, wxEmptyString, wxDefaultPosition, wxSize(60, -1), m_pOutputFormatComboCtrlStrings, wxCB_READONLY );
    itemStaticBoxSizer9->Add(m_pOutputFormatComboCtrl, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer13Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Input"));
    wxStaticBoxSizer* itemStaticBoxSizer13 = new wxStaticBoxSizer(itemStaticBoxSizer13Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer13, 0, wxGROW|wxALL, 5);

    m_pInputStaticCtrl = new wxStaticText( itemDialog1, wxID_STATIC, _("Input CAD File  "), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer13->Add(m_pInputStaticCtrl, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer15 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer13->Add(itemBoxSizer15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pInputFileNameTextCtrl = new wxTextCtrl( itemDialog1, ID_TEXTCTRL, wxEmptyString, wxDefaultPosition, wxSize(150, -1), 0 );
    itemStaticBoxSizer13->Add(m_pInputFileNameTextCtrl, 0, wxGROW|wxALL, 5);

    m_FileOpenButton = new wxButton( itemDialog1, ID_FILEOPEN_BUTTON, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT );
    itemStaticBoxSizer13->Add(m_FileOpenButton, 0, wxGROW|wxLEFT|wxTOP|wxBOTTOM, 5);

    wxStaticBox* itemStaticBoxSizer18Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Output"));
    wxStaticBoxSizer* itemStaticBoxSizer18 = new wxStaticBoxSizer(itemStaticBoxSizer18Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer18, 0, wxGROW|wxALL, 5);

    m_pOutputStaticCtrl = new wxStaticText( itemDialog1, wxID_STATIC, _("Output CAX File"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer18->Add(m_pOutputStaticCtrl, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer20 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer18->Add(itemBoxSizer20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pOutputFileNameTextCtrl = new wxTextCtrl( itemDialog1, ID_TEXTCTRL1, wxEmptyString, wxDefaultPosition, wxSize(150, -1), 0 );
    itemStaticBoxSizer18->Add(m_pOutputFileNameTextCtrl, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton22 = new wxButton( itemDialog1, ID_FILESAVE_BUTTON, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT );
    itemStaticBoxSizer18->Add(itemButton22, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer23 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer23, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText24 = new wxStaticText( itemDialog1, wxID_STATIC, _("Tessellation Tolerance"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer23->Add(itemStaticText24, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

     m_pTessToleranceTextCtrl = new wxTextCtrl( itemDialog1, ID_TEXTCTRL2, _("0.05"), wxDefaultPosition, wxSize(60, -1), 0 );
    itemBoxSizer23->Add(m_pTessToleranceTextCtrl, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pTransparencyCheckBoxCtrl = new wxCheckBox( itemDialog1, ID_TRANSPARENCY_CHECKBOX, _("Ignore Transparency"), wxDefaultPosition, wxDefaultSize, 0 );
    m_pTransparencyCheckBoxCtrl->SetValue(false);
    itemBoxSizer23->Add(m_pTransparencyCheckBoxCtrl, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer27Static = new wxStaticBox(itemDialog1, wxID_ANY, wxEmptyString);
    wxStaticBoxSizer* itemStaticBoxSizer27 = new wxStaticBoxSizer(itemStaticBoxSizer27Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer27, 0, wxGROW|wxALL, 5);

    wxButton* itemButton28 = new wxButton( itemDialog1, ID_TRANSLATE_BUTTON, _("Translate"), wxDefaultPosition, wxSize(65, -1), 0 );
    itemStaticBoxSizer27->Add(itemButton28, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton29 = new wxButton( itemDialog1, ID_ABOUT_BUTTON, _("About..."), wxDefaultPosition, wxSize(65, -1), 0 );
    itemStaticBoxSizer27->Add(itemButton29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton30 = new wxButton( itemDialog1, ID_HELP_BUTTON, _("Help..."), wxDefaultPosition, wxSize(65, -1), 0 );
    itemStaticBoxSizer27->Add(itemButton30, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton31 = new wxButton( itemDialog1, ID_CLOSE_BUTTON, _("Close"), wxDefaultPosition, wxSize(65, -1), 0 );
    itemStaticBoxSizer27->Add(itemButton31, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end VMoveCAD content construction

	m_sOutputFormat = "cax";
	m_pOutputFormatComboCtrl->Append("cax");
	m_pOutputFormatComboCtrl->Append("cgr"); 
	m_pOutputFormatComboCtrl->SetSelection(0);

}


/*
 * Should we show tooltips?
 */

bool VMoveCAD::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap VMoveCAD::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin VMoveCAD bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end VMoveCAD bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon VMoveCAD::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin VMoveCAD icon retrieval
    wxUnusedVar(name);
    if (name == _T("VMoveCAD.ico"))
    {
        wxIcon icon(_T("VMoveCAD.ico"), wxBITMAP_TYPE_ICO);
        return icon;
    }
    return wxNullIcon;
////@end VMoveCAD icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_FILEOPEN_BUTTON
 */

void VMoveCAD::OnFileopenButtonClick( wxCommandEvent& event )
{
    if(m_bFileMode)
    {
		wxFileDialog * openFileDialog = new wxFileDialog(this,_("Select CAD file"),_(""), _(""), _("All supported files(*.CATProduct;*CATPart;*.model;*.prt;*.prt.*;*.asm;*.asm.*;*.step;*.stp;*.iges;*.igs;*.cgr;*.ipt;*.iam;*.prt;*.par;*.psm;*.asm;*.sldasm;*.sldprt)|*.CATProduct;*CATPart;*.model;*.prt;*.prt.*;*.asm;*.asm.*;*.step;*.stp;*.iges;*.igs;*.cgr;*.ipt;*.iam;*.prt;*.par;*.psm;*.asm;*.sldasm;*.sldprt|Catia V5 3D(*.CATProduct;*CATPart)|*.CATProduct;*CATPart|Catia V4 3D(*.model)|*.model|ProE 3D(*.prt;*.prt.*;*.asm;*.asm.*)|*.prt;*.prt.*;*.asm;*.asm.*|STEP(*.step;*.stp)|*.step;*.stp|IGES 3D(*.iges;*.igs)|*.iges;*.igs|CGR(*.cgr)|*.cgr|Inventor 3D(*.ipt;*.iam)|*.ipt;*.iam|UG NX 3D(*.prt)|*.prt|SolidWorks(*.sldasm;*.sldprt)|*.sldasm;*.sldprt|Solid Edge(*.par;*.psm;*.asm)|*.par;*.psm;*.asm"), wxFD_OPEN|wxFD_FILE_MUST_EXIST);
        if (openFileDialog->ShowModal() == wxID_OK)
        {
 			m_pInputFileNameTextCtrl->ChangeValue("");
			m_pOutputFileNameTextCtrl->ChangeValue("");
            m_pInputFileNameTextCtrl->WriteText(openFileDialog->GetPath()); 
 
			std::string ext,OutputFile;
			OutputFile = openFileDialog->GetPath();
			ext = OutputFile.substr(OutputFile.find_last_of(".") + 1) ;
			//OutputFile.replace(OutputFile.find_last_of(".")+1,ext.size(),"cax");
			OutputFile.replace(OutputFile.find_last_of(".")+1,ext.size(),m_sOutputFormat);
			m_pOutputFileNameTextCtrl->WriteText(OutputFile.c_str());
        }
    }
    else
    {
        wxDirDialog * openDirDialog = new wxDirDialog(this,_("Choose a Directory"),_(""), wxDD_DEFAULT_STYLE);
        if (openDirDialog->ShowModal() == wxID_OK)
        {
 			m_pInputFileNameTextCtrl->ChangeValue("");
 			m_pOutputFileNameTextCtrl->ChangeValue("");
            m_pInputFileNameTextCtrl->WriteText(openDirDialog->GetPath());
			m_pOutputFileNameTextCtrl->WriteText(openDirDialog->GetPath());
        }
    }
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_FILESAVE_BUTTON
 */

void VMoveCAD::OnFilesaveButtonClick( wxCommandEvent& event )
{
	if(m_bFileMode)
	{
		std::string InputPath = vcUtils::wxStringToChar(m_pInputFileNameTextCtrl->GetLineText(0));
		std::string FileName;
		if(InputPath.size())
			FileName = vcUtils::GetFileNameFromFullPath(InputPath);
		wxFileDialog * saveFileDialog = new wxFileDialog(this,_("Save As"),_(""), FileName, _("VCollab Files(*.cax)|*.cax|CGR(*.cgr)|*.cgr"),wxFD_SAVE|wxFD_OVERWRITE_PROMPT);
		if (saveFileDialog->ShowModal() == wxID_OK)
		{
			m_pOutputFileNameTextCtrl->ChangeValue("");
			m_pOutputFileNameTextCtrl->WriteText(saveFileDialog->GetPath());

			if(vcUtils::GetFileExt(saveFileDialog->GetPath().c_str())=="cgr")
			{
				m_pTransparencyCheckBoxCtrl->Disable();
			}
			else
			{
				m_pTransparencyCheckBoxCtrl->Enable(true);
			}
		}
	}
	else
	{
		wxDirDialog * saveDirDialog = new wxDirDialog(this,_("Choose a Directory"),_(""), wxDD_DEFAULT_STYLE);
		if (saveDirDialog->ShowModal() == wxID_OK)
		{
			m_pOutputFileNameTextCtrl->ChangeValue("");
			m_pOutputFileNameTextCtrl->WriteText(saveDirDialog->GetPath());

			if(m_sOutputFormat=="cgr")
			{
				m_pTransparencyCheckBoxCtrl->Disable();
			}
			else
			{
				m_pTransparencyCheckBoxCtrl->Enable(true);
			}
		}
	}
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_ABOUT_BUTTON
 */

void VMoveCAD::OnAboutButtonClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_ABOUT_BUTTON in VMoveCAD.
    // Before editing this code, remove the block markers.
    About* window = new About(this);
    int returnValue = window->ShowModal();
    window->Destroy();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_ABOUT_BUTTON in VMoveCAD. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TRANSLATE_BUTTON
 */

std::vector<float *> FloatArrays;
std::vector<int *> IntArrays;
extern bool g_bdtkErrorFileNotExist;

void VMoveCAD::OnTranslateButtonClick( wxCommandEvent& event )
{
	//unicode
	//std::string InputPath =wxStringToChar(m_pInputFileNameTextCtrl->GetLineText(0));
	//std::string OutputPath =wxStringToChar(m_pOutputFileNameTextCtrl->GetLineText(0));
	std::string InputPath =m_pInputFileNameTextCtrl->GetLineText(0).c_str();
	std::string OutputPath =m_pOutputFileNameTextCtrl->GetLineText(0).c_str();
	bool bSuccess = true;
	sOutputFormat = m_sOutputFormat.c_str();

	g_fTessTolerance = atof(this->m_pTessToleranceTextCtrl->GetValue().c_str());

	if(m_bFileMode)
		vcUtils::LogMsg("VMoveCAD::OnTranslateButtonClick : File Mode");
	else
		vcUtils::LogMsg("VMoveCAD::OnTranslateButtonClick : Directory Mode");

	std::string memusage = vcUtils::GetMemoryUsage();
	std::stringstream ss;
    ss.str("");
	ss<<"VMoveCAD::OnTranslateButtonClick : Memory Usage b4 conversion: "<<memusage;
	vcUtils::LogMsg(ss.str());
    ss.str("");

	if(FloatArrays.size())
		FloatArrays.erase(FloatArrays.begin(),FloatArrays.end());
	if(IntArrays.size())
		IntArrays.erase(IntArrays.begin(),IntArrays.end());

	if(!vcCadTranslator::Translate(InputPath,OutputPath,m_bFileMode,bSuccess))
	{
		return;
	}
	memusage = vcUtils::GetMemoryUsage();
    ss.str("");
	ss<<"VMoveCAD::OnTranslateButtonClick : Memory Usage after conversion: "<<memusage;
	vcUtils::LogMsg(ss.str());
    ss.str("");

	for(int i=0;i<FloatArrays.size();i++)
	{
		float *pFloat = (float*)FloatArrays[i];
		delete []pFloat;
		pFloat = NULL;
	}
	for(int i=0;i<IntArrays.size();i++)
	{
		float *pInt = (float*)IntArrays[i];
		delete []pInt;
		pInt = NULL;
	}

	if(FloatArrays.size())
		FloatArrays.erase(FloatArrays.begin(),FloatArrays.end());
	if(IntArrays.size())
		IntArrays.erase(IntArrays.begin(),IntArrays.end());

	memusage = vcUtils::GetMemoryUsage();
    ss.str("");
	ss<<"VMoveCAD::OnTranslateButtonClick : Memory Usage after memory clean: "<<memusage;
	vcUtils::LogMsg(ss.str());
    ss.str("");


	if(m_bFileMode)
	{
		if(bSuccess)
		{
			if(g_dtkErrorStatus == dtkErrorFileNotExist)
			{ 
				wxMessageBox(_("                     Translation completed.\nBut there might be a data loss in the output file \nas one or more part files are missing in the input directory!!!"), wxT("Translation Result"),wxICON_INFORMATION, NULL);
			}   
			else if(g_dtkErrorStatus == dtkErrorVersionNotSupported)
			{
				wxMessageBox(_("                     Translation completed.\nBut there might be a data loss in the output file \nas one or more input part files version is not supported!!!"), wxT("Translation Result"),wxICON_INFORMATION, NULL);
			}   
			else
			{
				wxMessageBox(_("Translated successfully!!!"), wxT("Translation Result"),wxICON_INFORMATION, NULL);
			}
		}
		else
		{
			//wxMessageBox(_("Translation failed!!!"), wxT("Translation Result"),wxICON_ERROR, NULL);
		}
	}
	else
	{
		ss.str("");
		ss<<"Translated "<<g_iOutputFilesCount<<" of "<<g_iInputFilesCount<<" files successfully!!!";
		wxMessageBox(ss.str()  , wxT("Translation Result"),wxICON_INFORMATION, NULL);
		ss.str("");
	}
	g_iInputFilesCount = 0;
	g_iOutputFilesCount = 0;

}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CLOSE_BUTTON
 */

void VMoveCAD::OnCloseButtonClick( wxCommandEvent& event )
{
	vcUtils::LogMsg("VMoveCADApp::OnCloseButtonClick : Exit");
    EndModal(1);
}


/*
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_FILE_RADIOBUTTON
 */

void VMoveCAD::OnFileRadiobuttonSelected( wxCommandEvent& event )
{
	if(!m_bFileMode)
	{
		m_pInputFileNameTextCtrl->ChangeValue("");
		m_pOutputFileNameTextCtrl->ChangeValue("");
	}
    m_bFileMode = true;
	 m_pInputStaticCtrl->SetLabel("Input CAD File  ");
	m_pOutputStaticCtrl->SetLabel("Output File       ");
}


/*
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_DIRECTORY_RADIOBUTTON
 */

void VMoveCAD::OnDirectoryRadiobuttonSelected( wxCommandEvent& event )
{
 	if(m_bFileMode)
	{
		m_pInputFileNameTextCtrl->ChangeValue("");
		m_pOutputFileNameTextCtrl->ChangeValue("");
	}
    m_bFileMode = false;
	 m_pInputStaticCtrl->SetLabel("Input Directory  ");
	m_pOutputStaticCtrl->SetLabel("Output Directory   ");
}

 


/*
 * wxEVT_COMMAND_COMBOBOX_SELECTED event handler for ID_COMBOBOX
 */

void VMoveCAD::OnComboboxSelected( wxCommandEvent& event )
{
    m_sOutputFormat = m_pOutputFormatComboCtrl->GetString(m_pOutputFormatComboCtrl->GetSelection());
	if(m_bFileMode && m_pOutputFileNameTextCtrl->GetLineText(0).size())
	{
		std::string OutputFile = m_pOutputFileNameTextCtrl->GetLineText(0);
		std::string ext = OutputFile.substr(OutputFile.find_last_of(".") + 1) ;
		OutputFile.replace(OutputFile.find_last_of(".")+1,ext.size(),m_sOutputFormat);
		m_pOutputFileNameTextCtrl->ChangeValue("");
		m_pOutputFileNameTextCtrl->WriteText(OutputFile.c_str());
	}
	if(m_sOutputFormat=="cgr")
	{
		m_pTransparencyCheckBoxCtrl->Disable();
	}
	else
	{
		m_pTransparencyCheckBoxCtrl->Enable(true);
	}
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_HELP_BUTTON
 */

void VMoveCAD::OnHelpButtonClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_HELP_BUTTON in VMoveCAD.
    // Before editing this code, remove the block markers.
    wxGetApp().ShowHelp(_("Help"), this);
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_HELP_BUTTON in VMoveCAD. 
    wxGetApp().ShowHelp(_(""), this);
}

 


/*
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_TRANSPARENCY_CHECKBOX
 */

void VMoveCAD::OnTransparencyCheckboxClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_TRANSPARENCY_CHECKBOX in VMoveCAD.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_TRANSPARENCY_CHECKBOX in VMoveCAD. 
	if(m_pTransparencyCheckBoxCtrl->IsChecked())
		g_bIgnoreTransparency = true;
	else
		g_bIgnoreTransparency = false;

}

